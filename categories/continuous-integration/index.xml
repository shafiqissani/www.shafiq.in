<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shafiq Alibhai </title>
    <link>https://shafiqissani.github.io/www.shafiq.in/categories/continuous-integration/</link>
    <language>en-us</language>
    <author></author>
    <rights>(C) 2016</rights>
    <updated>2012-08-30 22:44:59 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Releng - The Plan</title>
          <link>https://shafiqissani.github.io/www.shafiq.in/2012/08/30/releng-the-plan/</link>
          <pubDate>Thu, 30 Aug 2012 22:44:59 UTC</pubDate>
          <author></author>
          <guid>https://shafiqissani.github.io/www.shafiq.in/2012/08/30/releng-the-plan/</guid>
          <description>&lt;p&gt;The plan&lt;/p&gt;
&lt;p&gt;Everyone loves it when a plan comes together so here’s the general approach to setting up the system:&lt;/p&gt;
&lt;p&gt;All the configuration files and Puppet Manifests are stored in a git repository&lt;br /&gt;
Changes are made and then committed to the repository before being “pushed” to the CI server&lt;br /&gt;
The CI Server (Jenkins in our case) runs a series of tests on the manifests and configuration files&lt;br /&gt;
If the tests fail, the build breaks and notifications are sent via Jabber, Email or even a large robotic rabbit…&lt;br /&gt;
If the builds pass, the manifests and config files are deployed to the Puppetmaster by Capistrano&lt;br /&gt;
A puppet run is forced across all servers using MCollective&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Continuous Delivery : A Mini Hurdle</title>
          <link>https://shafiqissani.github.io/www.shafiq.in/2012/01/02/continuous-delivery-a-mini-hurdle/</link>
          <pubDate>Mon, 02 Jan 2012 23:01:13 UTC</pubDate>
          <author></author>
          <guid>https://shafiqissani.github.io/www.shafiq.in/2012/01/02/continuous-delivery-a-mini-hurdle/</guid>
          <description>&lt;p&gt;The first hurdle to overcome with Continuous Delivery I think is not getting your product’s code onto the machine itself, but managing the actual machine and it’s software... and in talking to people. It is the subtle nuances between machines due to people tweaking things on the fly that lead to the worst [most annoying] bugs to troubleshoot.&lt;br /&gt;
The end-goal of managing your machines is that no one ever logs into the machine directly.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Continuous Delivery</title>
          <link>https://shafiqissani.github.io/www.shafiq.in/2012/01/02/continuous-delivery/</link>
          <pubDate>Mon, 02 Jan 2012 22:53:29 UTC</pubDate>
          <author></author>
          <guid>https://shafiqissani.github.io/www.shafiq.in/2012/01/02/continuous-delivery/</guid>
          <description>&lt;p&gt;&lt;a href=&#34;http://www.infoq.com/resource/articles/QCon-San-Francisco-2010/en/resources/Continuous_Delivery_Notes.png&#34; target=&#34;_blank&#34;&gt;&lt;img class=&#34;alignnone&#34; src=&#34;{{ site.baseurl }}/assets/Continuous_Delivery_Notes.png&#34; alt=&#34;&#34; width=&#34;536&#34; height=&#34;240&#34; /&gt;&lt;/a&gt;&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Continuous Deployment</title>
          <link>https://shafiqissani.github.io/www.shafiq.in/2010/10/19/continuous-deployment/</link>
          <pubDate>Tue, 19 Oct 2010 14:37:45 UTC</pubDate>
          <author></author>
          <guid>https://shafiqissani.github.io/www.shafiq.in/2010/10/19/continuous-deployment/</guid>
          <description>&lt;p&gt;[slideshare id=5345889&amp;amp;doc=continuousdeployment-101003140021-phpapp01]&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
