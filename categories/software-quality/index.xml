<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shafiq Alibhai </title>
    <link>https://www.shafiq.in/categories/software-quality/</link>
    <language>en-us</language>
    <author></author>
    <rights>(C) 2016</rights>
    <updated>2012-01-02 23:01:13 &#43;0000 UTC</updated>

    
      
        <item>
          <title>Continuous Delivery : A Mini Hurdle</title>
          <link>https://www.shafiq.in/2012/01/02/continuous-delivery-a-mini-hurdle/</link>
          <pubDate>Mon, 02 Jan 2012 23:01:13 UTC</pubDate>
          <author></author>
          <guid>https://www.shafiq.in/2012/01/02/continuous-delivery-a-mini-hurdle/</guid>
          <description>&lt;p&gt;The first hurdle to overcome with Continuous Delivery I think is not getting your product’s code onto the machine itself, but managing the actual machine and it’s software... and in talking to people. It is the subtle nuances between machines due to people tweaking things on the fly that lead to the worst [most annoying] bugs to troubleshoot.&lt;br /&gt;
The end-goal of managing your machines is that no one ever logs into the machine directly.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>Database Integration - some points to keep in mind</title>
          <link>https://www.shafiq.in/2010/09/18/database-integration-some-points-to-keep-in-mind/</link>
          <pubDate>Sat, 18 Sep 2010 12:49:26 UTC</pubDate>
          <author></author>
          <guid>https://www.shafiq.in/2010/09/18/database-integration-some-points-to-keep-in-mind/</guid>
          <description>&lt;p&gt;&lt;strong&gt;Always Have a Single, Authoritative Source For Your Schema&lt;br /&gt;
&lt;/strong&gt; Everyone should know where the official schema resides, and have a frictionless experience in getting a fresh database setup. One should be able to walk up to a computer, get the latest from source control, build, and run a simple tool to setup the database (in many scenarios, the build process can even setup a database if none exists, so the process is one step shorter).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Always Version Your Database&lt;br /&gt;
&lt;/strong&gt;The common goal is to propagate changes from development, to test, and ultimately to production in a controlled and consistent manner. A second goal is to have the ability to recreate a database at any point in time. This second goal is particularly important if you are shipping software to clients. If someone finds a bug in build 20100612.1 of your application, you must be able to recreate the application as it appeared in that build - database and all.&lt;/p&gt;
</description>
        </item>
      
    
      
        <item>
          <title>One Perspective on Improved Software Quality and Reduced Risks</title>
          <link>https://www.shafiq.in/2010/09/15/one-perspective-on-improved-software-quality-and-reduced-risks/</link>
          <pubDate>Wed, 15 Sep 2010 09:41:06 UTC</pubDate>
          <author></author>
          <guid>https://www.shafiq.in/2010/09/15/one-perspective-on-improved-software-quality-and-reduced-risks/</guid>
          <description>&lt;p&gt;We talk endlessly about improved software quality and reduced risks, but deployable software is the most tangible asset to “outsiders”&lt;br /&gt;
such as clients or users. The importance of this point cannot be overstated.&lt;/p&gt;
</description>
        </item>
      
    

  </channel>
</rss>
